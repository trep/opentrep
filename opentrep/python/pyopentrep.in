#!/usr/bin/env python

import sys, getopt, os
import simplejson as json
sys.path.append ('@INSTALL_LIB_DIR@')

# Usage
def usage (script_name):
    print
    print "That script searches for, against a Xapian-indexed database of"
    print "travel-related terms, place key words. It allows for some"
    print "mis-spelling. For instance: 'sna francicso rio de janero lso angles reykyavki'"
    print "will retrieve the details of San Francisco, CA,"
    print "Rio de Janeiro, Brasil, Los Angeles, CA and Reykjavik, Iceland."
    print
    print "The output is a mere string giving the retrieved place codes"
    print "associated to their correspondong matching weights. It can:"
    print " - be a single line with only the place codes and matching weigths;"
    print " - give the full details, as returned by the C++ library;"
    print " - return a JSON-formatted string with all the details"
    print
    print "Usage: %s [options] \"search string\"" % script_name
    print
    print "The default output is short."
    print
    print "Options:"
    print "  -h, --help      : outputs this help and exits"
    print "  -i, --index     : performs the indexation with Xapian"
    print "  -x, --xapiandb= : specifies the path to the Xapian DB (index)"
    print "  -f, --format=   : format of the output: Short (S, default),"
    print "                    Full (F), raw JSON (J) and"
    print "                    Interpretation from JSON (I)"
    print

# Conversion of a string into a boolean
def str2bool (v):
    return v.lower() in ("yes", "true", "t", "1")

# Handle command-line options
def handle_opt():
    try:
        opts, args = getopt.getopt (sys.argv[1:], "hif:x:",
                        ["help", "index", "format=", "xapiandb="])
    except getopt.GetoptError, err:
        # Print help information and exit. It will print something like
        # "option -a not recognized"
        print str(err)
        usage()
        sys.exit(2)

    # Command, either 'search' or 'index'
    command = 'search'

    # Format of the output
    outputFormat = 'S'

    # Default search string
    searchString = 'sna francicso rio de janero lso angles reykyavki'
    if len (args) >= 1:
        searchString = ' '.join (args)

    # Options
    xapianDBPath = "/tmp/opentrep/traveldb"
    for o, a in opts:
        if o in ("-f", "--format"):
            outputFormat = a
        elif o in ("-x", "--xapiandb"):
            xapianDBPath = a
        elif o in ("-i", "--index"):
            command = "index"
        elif o in ("-h", "--help"):
            usage (sys.argv[0])
            sys.exit()
        else:
            assert False, "Unhandled option"
    return (command, outputFormat, xapianDBPath, searchString)

# Parser helpers
def getMain (locations):
    return locations[:3]

##
# Compact result parser. The result string contains the main matches,
# separated by commas (','), along with their associated weights, given
# as percentage numbers. For every main match:
#  - Columns (':') separate potential extra matches (i.e., matches with the same
#    matching percentage).
#  - Dashes ('-') separate potential alternate matches (i.e., matches with lower
#    matching percentages).
#
# Samples of result string to be parsed:
#  - pyopentrep -f S nice sna francisco vancouver niznayou
#    - 'nce/100,sfo/100-emb/98-jcc/97,yvr/100-cxh/83-xea/83-ydt/83;niznayou'
#  - pyopentrep -f S fr
#    - 'aur:avf:bae:bou:chr:cmf:cqf:csf:cvf:dij/100'
def compactResultParser (resultString):
    # Defaults
    msg, unrecognized = '', ''
    codes, locations, alter_locations = [], [], []

    # Initialise the string of matches with the raw result
    str_matches = resultString

    # Parsing begins
    # 1. First, strip out the unrecognised keywords
    if ';' in str_matches:
        str_matches, unrecognized = str_matches.split(';', 1)

    msg = 'Unrecognised: %s. ' % unrecognized
    str_value = unrecognized

    # 2. Then, for each matching location, the alternate matches have to be
    #    stored aside.
    if not str_matches:
        return ''

    else:
        alter_locations = str_matches.split(',')
        locations = [getMain(x) for x in alter_locations]

        for alter_location_list in alter_locations:
            alter_location_list = alter_location_list.split('-')
            for extra_location_list in alter_location_list:
                extra_location_list = extra_location_list.split(':')

                codes = [x[:3].upper() for x in alter_locations]
                if codes:
                    form_value = [' '.join(codes)]
                if str_value:
                    form_value.append (str_value)

        return ' '.join (form_value)

##
# JSON interpreter. The JSON structure contains a list with the main matches,
# along with their associated fields (weights, coordinates, etc).
# For every main match:
#  - There is a potential list of extra matches (i.e., matches with the same
#    matching percentage).
#  - There is a potential list of alternate matches (i.e., matches with lower
#    matching percentages).
#
# Samples of result string to be parsed:
#  - pyopentrep -f J nice sna francisco
#    - {'locations':[
#         {'names':[
#            {'name': 'nice'}, {'name': 'nice/fr:cote d azur'}],
#          'city_code': 'nce'},
#         {'names':[
#            {'name': 'san francisco'}, {'name': 'san francisco/ca/us:intl'}],
#          'city_code': 'sfo',
#          'alternates':[
#               {'names':[
#                   {'name': 'san francisco emb'},
#                   {'name': 'san francisco/ca/us:embarkader'}],
#                   'city_code': 'sfo'},
#               {'names':[
#                   {'name': 'san francisco jcc'},
#                   {'name': 'san francisco/ca/us:china hpt'}],
#                   'city_code': 'sfo'}
#         ]}
#      ]}
#  - pyopentrep -f J fr
#    - {'locations':[
#         {'names':[
#            {'name': 'aurillac'}, {'name': 'aurillac/fr'}],
#          'extras':[
#            {'names':[
#               {'name': 'avoriaz'}, {'name': 'avoriaz/fr'}],
#             'city_code': 'avf'},
#            {'names':[
#               {'name': 'barcelonnette'}, {'name': 'barcelonnette/fr'}],
#             'city_code': 'bae'}
#         ]}
#      ]}
def interpretFromJSON (jsonFormattedResult):
    parsedStruct = json.loads (jsonFormattedResult)
    interpretedString = ''
    for location in parsedStruct['locations']:
        interpretedString += location['iata_code'] + '-' 
        interpretedString += location['icao_code'] + '-' 
        interpretedString += location['geonames_id'] + ' ' 
        interpretedString += '(' + location['page_rank'] + '%) / '
        interpretedString += location['city_code'] + ": "
        interpretedString += location['lat'] + ' ' 
        interpretedString += location['lon'] + '; '

    #
    return interpretedString


##
# File-path details
#
def getPaths (openTrepLibrary):
    # Calls the underlying OpenTrep library service
    filePathListString = openTrepLibrary.getPaths()
    filePathList = filePathListString.split(';')

    # Report the results
    print "ORI-maintained list of POR (points of reference): '" + filePathList[0] + "'"
    print "Xapian-based travel database/index: '" + filePathList[1] + "'"


##
# Indexation
#
def index (openTrepLibrary, xapianDBPath):
    # DEBUG
    print "Perform the indexation of the (Xapian-based) travel database."
    print "That operation may take several minutes on some slow machines."
    print "It takes less than 20 seconds on fast ones..."

    # Calls the underlying OpenTrep library service
    result = openTrepLibrary.index()

    # Report the results
    print "Done. Indexed " + result + " POR (points of reference)"


##
# Search
#
def search (openTrepLibrary, searchString, outputFormat):
    # If no search string was supplied as arguments of the command-line,
    # ask the user for some
    if searchString == '':
        # Ask for the user input
        searchString = raw_input ("Enter a search string, e.g., 'rio de janero sna francisco'")
    if searchString == '':
        searchString = 'rio de janero sna francisco'

    # DEBUG
    print "searchString: " + searchString

    ##
    # Call the OpenTrep C++ library.
    #
    # The 'I' (Interpretation from JSON) output format is just an example
    # of how to use the output generated by the OpenTrep library. Hence,
    # that latter does not support that "output format". So, the raw JSON
    # format is required, and the JSON string will then be parsed and
    # interpreted by the interpretFromJSON() method, just to show how it
    # works
    opentrepOutputFormat = outputFormat
    if (opentrepOutputFormat == 'I'): opentrepOutputFormat = 'J'

    result = openTrepLibrary.search (opentrepOutputFormat, searchString)

    # When the compact format is selected, the result string has to be
    # parsed accordingly.
    if (outputFormat == 'S'):
        parsedStruct = compactResultParser (result)
        print 'Compact format => recognised place (city/airport) codes:'
        print parsedStruct

    # When the full details have been requested, the result string is
    # potentially big and complex, and is not aimed to be
    # parsed. So, the result string is just displayed/dumped as is.
    elif (outputFormat == 'F'):
        print 'Raw result from the OpenTrep library:'
        print result

    # When the raw JSON format has been requested, no handling is necessary.
    elif (outputFormat == 'J'):
        print 'Raw (JSON) result from the OpenTrep library:'
        print result

    # The interpreted JSON format is an example of how to extract relevant
    # information from the corresponding Python structure. That code can be
    # copied/pasted by clients to the OpenTREP library.
    elif (outputFormat == 'I'):
        interpretedString = interpretFromJSON (result)
        print 'JSON format => recognised place (city/airport) codes:'
        print interpretedString



############################
# Main
############################
if __name__ == '__main__':
    command, outputFormat, xapianDBPath, searchString = handle_opt()

    # Initialise the OpenTrep C++ library
    import libpyopentrep
    openTrepLibrary = libpyopentrep.OpenTrepSearcher()
    initOK = openTrepLibrary.init (xapianDBPath, 'pyopentrep.log')
    if initOK == False:
        errorMsg = 'Error: The OpenTrepLibrary cannot be initialised'
        raise Exception (errorMsg)

    # Print out the file-path details
    getPaths (openTrepLibrary)

    #
    if command == 'index':
        index (openTrepLibrary, xapianDBPath)
    else:
        search (openTrepLibrary, searchString, outputFormat)


    # Free the OpenTREP library resource
    openTrepLibrary.finalize()

